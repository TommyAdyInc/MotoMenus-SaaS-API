global-working-directory: &working-directory "/tmp/working-directory"

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.16
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-ecs: circleci/aws-ecs@0.0.18

jobs:
  composer-install:
    docker:
      - image: composer:1.9.1
    working_directory: *working-directory
    steps:
      - checkout
      - restore_cache:
          keys:
            - composer-install-without-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}
      - run:
          name: Install Composer dependencies
          environment:
            COMPOSER_ALLOW_SUPERUSER: 1
          command: composer install --no-dev --no-interaction --no-progress --no-scripts --prefer-source --verbose
      - run:
          name: Update the Composer autoloader (To handle new classes in a classmap package)
          command: composer dump-autoload --no-scripts
      - save_cache:
          key: composer-install-without-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}
          paths:
            - "vendor"
      - restore_cache:
          keys:
            - composer-install-with-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}-{{ checksum "database/seeds/DatabaseSeeder.php" }}-{{ checksum "database/seeds/TenantDatabaseSeeder.php" }}
      - run:
          name: Install Composer dependencies
          environment:
            COMPOSER_ALLOW_SUPERUSER: 1
          command: composer install --no-interaction --no-progress --no-scripts --prefer-source --verbose
      - run:
          name: Update the Composer autoloader (To handle new classes in a classmap package)
          command: composer dump-autoload --no-scripts
      - save_cache:
          key: composer-install-with-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}-{{ checksum "database/seeds/DatabaseSeeder.php" }}-{{ checksum "database/seeds/TenantDatabaseSeeder.php" }}
          paths:
            - "vendor"

  generate-oauth-keys:
    docker:
      - image: ${AWS_ECR_ACCOUNT_URL}/motomenus-saas-api-php-fpm:latest
    environment:
      - BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    working_directory: *working-directory
    steps:
      - checkout
      - restore_cache:
          keys:
            - composer-install-with-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}-{{ checksum "database/seeds/DatabaseSeeder.php" }}-{{ checksum "database/seeds/TenantDatabaseSeeder.php" }}
      - run:
          name: Set environment variables needed in subsequent steps
          command: |
            echo "export APP_ENV=${CIRCLE_BRANCH}" >> $BASH_ENV
            echo "export APP_KEY=$(php artisan key:generate --show)" >> $BASH_ENV
      - restore_cache:
          keys:
            - oauth-encryption-keys-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Create encryption keys in the /storage directory that are needed to generate secure access tokens
          command: php artisan passport:keys
      - save_cache:
          key: oauth-encryption-keys-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - "storage/oauth-private.key"
            - "storage/oauth-public.key"

  run-unit-tests:
    docker:
      - image: ${AWS_ECR_ACCOUNT_URL}/motomenus-saas-api-php-fpm:latest
        environment:
          APP_ENV: "testing"
          DB_DATABASE_SYSTEM: "000-system-phpunit"
      - image: circleci/mysql:5.7.22
        command: mysqld --character-set-server="utf8mb4" --collation-server="utf8mb4_unicode_ci" --sql-mode="NO_ENGINE_SUBSTITUTION"
        environment:
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: "rootpass"
          MYSQL_DATABASE: "000-system-phpunit"
    environment:
      - BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    working_directory: *working-directory
    steps:
      - checkout
      - restore_cache:
          keys:
            - composer-install-with-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}-{{ checksum "database/seeds/DatabaseSeeder.php" }}-{{ checksum "database/seeds/TenantDatabaseSeeder.php" }}
      - run:
          name: Install mysql-client
          command: apk add --no-cache mysql-client
      - run:
          name: Set environment variables needed in subsequent steps
          command: echo "export APP_KEY=$(php artisan key:generate --show)" >> $BASH_ENV
      - restore_cache:
          keys:
            - oauth-encryption-keys-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Run "system" migrations
          command: php artisan migrate
      - run:
          name: Run "system" seeders
          command: php artisan db:seed
      - run:
          name: Run unit tests
          command: vendor/bin/phpunit

  build-and-push-image:
    executor: aws-cli/default
    working_directory: *working-directory
    steps:
      - checkout
      - restore_cache:
          keys:
            - composer-install-without-dev-deps-v1-{{ .Branch }}-{{ checksum "composer.lock" }}-{{ checksum "composer.json" }}
      - restore_cache:
          keys:
            - oauth-encryption-keys-v1-{{ .Branch }}-{{ .Revision }}
      - aws-ecr/build-and-push-image:
          checkout: false
          create-repo: true
          region: AWS_DEFAULT_REGION
          repo: $(echo "$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]')
          setup-remote-docker: true
          tag: "latest,${CIRCLE_BRANCH}-latest,Branch-${CIRCLE_BRANCH}_Workflow-${CIRCLE_WORKFLOW_ID}"

  make-replacements-in-task-definition:
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: *working-directory
    steps:
      - checkout
      - run:
          name: Set environment variables needed in subsequent steps
          command: |
            set -x
            # Lowercase the repo name.
            echo 'export CIRCLE_PROJECT_REPONAME_LOWERCASE=$(echo "$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]')' >> $BASH_ENV
      - run:
          name: Make necessary replacements in task definition file
          command: |
            set -x
            sed -i -e "s;%AWS_ACCOUNT_ID%;${AWS_ACCOUNT_ID};g" task-definition.json
            sed -i -e "s;%AWS_DEFAULT_REGION%;${AWS_DEFAULT_REGION};g" task-definition.json
            sed -i -e "s;%AWS_ECR_ACCOUNT_URL%;${AWS_ECR_ACCOUNT_URL};g" task-definition.json
            sed -i -e "s;%BRANCH%;${CIRCLE_BRANCH};g" task-definition.json
            sed -i -e "s;%IMAGE_TAG%;Branch-${CIRCLE_BRANCH}_Workflow-${CIRCLE_WORKFLOW_ID};g" task-definition.json
            sed -i -e "s;%REPONAME%;${CIRCLE_PROJECT_REPONAME};g" task-definition.json
            sed -i -e "s;%REPONAME_LOWERCASE%;${CIRCLE_PROJECT_REPONAME_LOWERCASE};g" task-definition.json
            sed -i -e "s;%WORKFLOW_ID%;${CIRCLE_WORKFLOW_ID};g" task-definition.json
            cat task-definition.json
      - save_cache:
          key: task-definition-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - task-definition.json

  register-ecs-task-definition:
    executor: aws-cli/default
    working_directory: *working-directory
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys:
            - task-definition-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Register ECS task definition
          command: |
            set -x
            aws ecs register-task-definition --family="${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-task-definition" --cli-input-json file://task-definition.json

workflows:
  version: 2
  main-workflow:
    jobs:
      - composer-install

      - generate-oauth-keys:
          context: "org-global"
          requires:
            - composer-install

      - run-unit-tests:
          context: "org-global"
          requires:
            - composer-install
            - generate-oauth-keys

      - build-and-push-image:
          context: "org-global"
          filters:
            branches:
              only:
                - dev
                - prod
          requires:
            - generate-oauth-keys
            - run-unit-tests

      - make-replacements-in-task-definition:
          context: "org-global"
          filters:
            branches:
              only:
                - dev
                - prod

      - register-ecs-task-definition:
          context: "org-global"
          filters:
            branches:
              only:
                - dev
                - prod
          requires:
            - build-and-push-image
            - make-replacements-in-task-definition

      - aws-ecs/deploy-service-update:
          aws-region: ${AWS_DEFAULT_REGION}
          cluster-name: "ecs-cluster"
          context: "org-global"
          family: "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-task-definition"
          filters:
            branches:
              only:
                - dev
                - prod
          requires:
            - register-ecs-task-definition
          service-name: "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-service"
          verify-revision-is-deployed: true
